/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bioapp;

import static bioapp.Form2.DEFAULT_OPEN_DIR;
import static bioapp.Form2.sequencelength;
import genelib.PredictOric;
import genelib.Readfile;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author jnu
 */
public class Predictionform extends javax.swing.JFrame {

    /**
     * Creates new form Predictionform
     */
    int filetype=0;//0 for glimmer and 1 for ptt
    public Predictionform() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        jTextFielddnabox.setEditable(false);
        jTextFielddnabox.setBackground(Color.lightGray);
        jLabeltitle.setForeground(Color.red);
        jLabel4.setForeground(Color.MAGENTA);
        jCheckBoxcorr.setSelected(true);
        jCheckBoxen.setSelected(true);
        jCheckBoxgc.setSelected(true);
        jCheckBoxmk.setSelected(true);
        jCheckBoxry.setSelected(true);
        jComboBoxmismatch.setSelectedIndex(1);
        jCheckBoxdnaA.setSelected(true);
        jComboBoxorb.setEnabled(false);
        
        //ImageIcon img = new ImageIcon("images/icons/orislogo.png");
        //jButtonopenptt.setIcon(img);
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jLabeltitle = new javax.swing.JLabel();
        jComboBoxdnabox = new javax.swing.JComboBox();
        jTextFieldgfname = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jCheckBoxenterother = new javax.swing.JCheckBox();
        jTextFielddnabox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jCheckBoxgc = new javax.swing.JCheckBox();
        jCheckBoxcorr = new javax.swing.JCheckBox();
        jCheckBoxen = new javax.swing.JCheckBox();
        jSlider1 = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jCheckBoxmk = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxmismatch = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldthresh = new javax.swing.JTextField();
        jButtonopenptt = new javax.swing.JButton();
        jTextFieldptt = new javax.swing.JTextField();
        jCheckBoxry = new javax.swing.JCheckBox();
        jComboBoxorb = new javax.swing.JComboBox();
        jCheckBoxdnaA = new javax.swing.JCheckBox();
        jCheckBoxorb = new javax.swing.JCheckBox();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabeltitle.setText("Prediction of OriC");

        jComboBoxdnabox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "E. Coli:TTATCCACA", "Bradyrhizobiaceca:TGTTTCACG", "Burkholderia C2:TTATGCGCA", "Burkholderia C3:TTCCCCATA", "Chlamydiae:TTTTCCACA", "Dehalococcoides:TTATCGAAA", "Flavobacteriaceae:TGTTCCACG", "Haemophilus:TTATMCACA", "Helicobacter:TCATTCACA", "Nitrobacter:TGTTTCACG", "MycoplasmaTTWTCCACA", "Prochorales:TTTTCCACA", "Synechococcus:TTTTCCACA", "Thermotoga:CCTACCACC", "Vibrio:ATGATCAAG" }));

        jTextFieldgfname.setText("     ");
        jTextFieldgfname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldgfnameActionPerformed(evt);
            }
        });

        jButton1.setText("Open Glimmer output file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Go");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBoxenterother.setText("Enter Other");
        jCheckBoxenterother.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxenterotherActionPerformed(evt);
            }
        });

        jLabel1.setText("Check  Methods Below");

        jCheckBoxgc.setText("GC skew");

        jCheckBoxcorr.setText("Correlation");

        jCheckBoxen.setText("Entropy");

        jSlider1.setMaximum(3);
        jSlider1.setMinimum(1);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setValue(1);

        jLabel4.setText("Depth of Search");

        jCheckBoxmk.setText("MK skew");

        jLabel5.setText("Max. Mismatches Allowed");

        jComboBoxmismatch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel6.setText("Minimum no. of dnaA matches required");

        jTextFieldthresh.setText("2");

        jButtonopenptt.setText("Open .ptt file");
        jButtonopenptt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonopenpttActionPerformed(evt);
            }
        });

        jCheckBoxry.setText("RY skew");

        jComboBoxorb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Methanococcacea:TTWKATTCAYRATWTWTW", "Halobacteriaceae:TTYCACCXGAAACRMRGKGK", "Methanobacteriaceae:TTWCACTTGAAATXTYSTC", "Methanomicrobia:TCCASTKGAAAYRAWGGGGT", "Sulfolobacea1:SGGCCGGRAKYKTSAMCCYGG" }));

        jCheckBoxdnaA.setText("Choose dnaA box");
        jCheckBoxdnaA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxdnaAActionPerformed(evt);
            }
        });

        jCheckBoxorb.setText("Choose ORB motif (Archea)");
        jCheckBoxorb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxorbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jCheckBoxenterother)
                                .addComponent(jCheckBoxdnaA)
                                .addComponent(jCheckBoxorb))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButtonopenptt)
                                .addComponent(jButton1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldgfname, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                .addComponent(jTextFielddnabox, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxmismatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextFieldthresh, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxdnabox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextFieldptt))
                            .addComponent(jComboBoxorb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxgc)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxmk)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel4)
                        .addGap(41, 41, 41)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxry)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBoxcorr)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxen))
                            .addComponent(jLabel1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(jLabeltitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(284, 284, 284)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabeltitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxdnabox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxdnaA))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxorb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxorb))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFielddnabox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxenterother))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jComboBoxmismatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldthresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonopenptt)
                    .addComponent(jTextFieldptt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldgfname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxmk)
                            .addComponent(jCheckBoxry)
                            .addComponent(jCheckBoxgc)
                            .addComponent(jCheckBoxcorr)
                            .addComponent(jCheckBoxen))
                        .addGap(30, 30, 30)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addComponent(jButton2)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(DEFAULT_OPEN_DIR);
        //chooser.addChoosableFileFilter(ff);

        int status = chooser.showOpenDialog(jLabeltitle);

        if (status == JFileChooser.APPROVE_OPTION) {
            File chosenFile = chooser.getSelectedFile();
            try {
                jTextFieldgfname.setText(chosenFile.getCanonicalPath());
                jTextFieldptt.setText("");
                filetype=0;
            } catch (IOException ex) {
                Logger.getLogger(Form2.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextFieldgfnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldgfnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldgfnameActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Readfile ob = new Readfile();
        char[] dnabox = null;
        int errorflag;
        int depth = 0, mismatch = 0, threshold = 0;

        mismatch = jComboBoxmismatch.getSelectedIndex() ;
        System.err.println("mismatch=" + mismatch);
        threshold = Integer.parseInt(jTextFieldthresh.getText());

        depth = jSlider1.getValue();
        boolean gc = false,mk = false,ry=false, corr = false, en = false;
        //check which methods to run
        if (jCheckBoxcorr.isSelected()) {
            corr = true;
        }
        if(jCheckBoxry.isSelected() ){
            ry=true;
        }
        if (jCheckBoxmk.isSelected()) {
            mk = true;
        }
        if (jCheckBoxgc.isSelected()) {
            gc = true;
        }
        if (jCheckBoxen.isSelected()) {
            en = true;
        }
        String selected = null;
        
        if (jCheckBoxenterother.isSelected()) {
            jTextFielddnabox.setText(jTextFielddnabox.getText().toUpperCase());
            selected = jTextFielddnabox.getText();
        } else {
            if(jCheckBoxdnaA.isSelected()){
            selected = jComboBoxdnabox.getSelectedItem().toString().split(":")[1];
            }
            if(jCheckBoxorb.isSelected()){
            selected = jComboBoxorb.getSelectedItem().toString().split(":")[1];
            }
            //System.err.println(selected);
        }
        if (selected.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter some value to search or uncheck the option");
            errorflag = 1;
        } else {
            dnabox = new char[selected.length()];
            for (int i = 0; i < selected.length(); i++) {
                dnabox[i] = selected.charAt(i);
            }
        }

        String fname=null;
        if(filetype==0){
            fname=jTextFieldgfname.getText();
        }
        else if(filetype==1){
            fname=jTextFieldptt.getText();
        }
        PredictOric ob2 = new PredictOric(ob.returnseq(), dnabox,mismatch,threshold, fname,filetype, depth, gc, mk,ry,corr, en);
        ob2.start();
        //ob2.run();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBoxenterotherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxenterotherActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxenterother.isSelected()) {
            jTextFielddnabox.setEditable(true);
            jTextFielddnabox.setBackground(Color.white);
            jComboBoxdnabox.setEnabled(false);
            jComboBoxorb.setEnabled(false);
            jCheckBoxdnaA.setSelected(false);
            jCheckBoxorb.setSelected(false);
                    
        } else {
            jTextFielddnabox.setEditable(false);
            jTextFielddnabox.setBackground(Color.lightGray);
            jComboBoxdnabox.setEnabled(true);
            jComboBoxorb.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxenterotherActionPerformed

    private void jButtonopenpttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonopenpttActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(DEFAULT_OPEN_DIR);
        //chooser.addChoosableFileFilter(ff);

        int status = chooser.showOpenDialog(jLabeltitle);

        if (status == JFileChooser.APPROVE_OPTION) {
            File chosenFile = chooser.getSelectedFile();
            try {
                jTextFieldptt.setText(chosenFile.getCanonicalPath());
                jTextFieldgfname.setText("");
                filetype=1;
            } catch (IOException ex) {
                Logger.getLogger(Form2.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButtonopenpttActionPerformed

    private void jCheckBoxdnaAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxdnaAActionPerformed
        // TODO add your handling code here:
        if(jCheckBoxdnaA.isSelected()){
            jCheckBoxorb.setSelected(false);
            jComboBoxorb.setEnabled(false);
            jCheckBoxenterother.setSelected(false);
            jTextFielddnabox.setEditable(false);
            jTextFielddnabox.setBackground(Color.lightGray);
            jComboBoxdnabox.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxdnaAActionPerformed

    private void jCheckBoxorbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxorbActionPerformed
        // TODO add your handling code here:
        if(jCheckBoxorb.isSelected()){
            //disable dnaa
            jCheckBoxdnaA.setSelected(false);
            jComboBoxdnabox.setEnabled(false);
            //disable other
            jCheckBoxenterother.setSelected(false);
            jTextFielddnabox.setEditable(false);
            jTextFielddnabox.setBackground(Color.lightGray);
            //enable this
            jComboBoxorb.setEnabled(true);
            
        }
    }//GEN-LAST:event_jCheckBoxorbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Predictionform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Predictionform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Predictionform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Predictionform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Predictionform().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonopenptt;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBoxcorr;
    private javax.swing.JCheckBox jCheckBoxdnaA;
    private javax.swing.JCheckBox jCheckBoxen;
    private javax.swing.JCheckBox jCheckBoxenterother;
    private javax.swing.JCheckBox jCheckBoxgc;
    private javax.swing.JCheckBox jCheckBoxmk;
    private javax.swing.JCheckBox jCheckBoxorb;
    private javax.swing.JCheckBox jCheckBoxry;
    private javax.swing.JComboBox jComboBoxdnabox;
    private javax.swing.JComboBox jComboBoxmismatch;
    private javax.swing.JComboBox jComboBoxorb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabeltitle;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextFielddnabox;
    private javax.swing.JTextField jTextFieldgfname;
    private javax.swing.JTextField jTextFieldptt;
    private javax.swing.JTextField jTextFieldthresh;
    // End of variables declaration//GEN-END:variables
}
