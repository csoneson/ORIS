/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bioapp;

import genelib.ATskew;
import genelib.CummATskew;
import genelib.CummGCskew;
import genelib.CummMKskew;
import genelib.CummRYskew;
import genelib.Entropy;
import genelib.Entropygx;
import genelib.GCskew;
import genelib.MKskew;
import genelib.Plotaminoketo;
import genelib.Plotnucleocompositions;

import genelib.Plotpyrpur;
import genelib.Plotstrngweak;
import genelib.Plotwholecomposition;
import genelib.RYskew;
import genelib.Readfile;
import genelib.Redundancyplot;
import genelib.Shentropyo1;
import genelib.Shentropyo2;
import genelib.Shentropyo3;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author jnu
 */
public class Skewform extends javax.swing.JFrame {

    /**
     * Creates new form Skewform
     */
    int winsize;
    int increment;
    int saveflag;
    //boolean flag to check the length of sequence to be passed on
    boolean len_flag = false;
    //fname contains the save directory path later add the file name to this path
    String fname = null;
    String tocall;
    ImageIcon img = new ImageIcon(getClass().getClassLoader().getResource("images/icons/orislogo.png"));
    int maxwinsize = Form2.sequencelength;

    public Skewform(String option) {

        initComponents();
        this.setIconImage(img.getImage());
        jTextFieldwinsize.setText(Form2.DEFAULT_WIN_SIZE);
        jTextFieldinc.setText(Form2.DEFAULT_INCREAMENT);
        //System.out.println("win="+Form2.DEFAULT_WIN_SIZE);

        tocall = option;

        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setTitle("Choose Window-size and Increament");
        winsize = 0;
        increment = 0;
        jTextFieldfilename.setEditable(false);
        jTextFieldfilename.setBackground(Color.LIGHT_GRAY);
        wholegenomecheck.setSelected(true);
        startpos.setEditable(false);
        endpos.setEditable(false);
        startpos.setBackground(Color.LIGHT_GRAY);
        endpos.setBackground(Color.LIGHT_GRAY);
        len_flag = false;
    }

    int charArrayToInt(char[] data) throws NumberFormatException {
        int result = 0;
        for (int i = 0; i < data.length; i++) {
            int digit = (int) data[i] - (int) '0';
            if ((digit < 0) || (digit > 9)) {
                throw new NumberFormatException();
            }
            result *= 10;
            result += digit;
        }
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldwinsize = new javax.swing.JTextField();
        jTextFieldinc = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jCheckBoxsavefile = new javax.swing.JCheckBox();
        jTextFieldfilename = new javax.swing.JTextField();
        jLabelfilename = new javax.swing.JLabel();
        wholegenomecheck = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        endpos = new javax.swing.JTextField();
        startpos = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Window Size");

        jLabel2.setText("Increament");

        jButton1.setText("Go");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBoxsavefile.setText("Save plot data to text file");
        jCheckBoxsavefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxsavefileActionPerformed(evt);
            }
        });

        jLabelfilename.setText("Enter File name");

        wholegenomecheck.setText("Use Whole Genome");
        wholegenomecheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wholegenomecheckActionPerformed(evt);
            }
        });

        jLabel3.setText("Start pos");

        jLabel4.setText("End pos");

        endpos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endposActionPerformed(evt);
            }
        });

        jLabel5.setText("*Position index starts from 1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addGap(42, 42, 42))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabelfilename)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startpos, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(endpos, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jCheckBoxsavefile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextFieldwinsize)
                                        .addComponent(jTextFieldinc)
                                        .addComponent(jTextFieldfilename))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(jLabel5))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(wholegenomecheck)))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldwinsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldinc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxsavefile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldfilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelfilename))
                .addGap(26, 26, 26)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(wholegenomecheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endpos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startpos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int flag = 1;

        try {

            winsize = Integer.parseInt(jTextFieldwinsize.getText());
            increment = Integer.parseInt(jTextFieldinc.getText());
        } catch (NumberFormatException x) {
            System.out.println("Error : " + x.getMessage());
            x.printStackTrace();
        }

        //check for invalid values for winsize and increment
        if (winsize <= 0 || increment <= 0 && flag == 1) {
            JOptionPane.showMessageDialog(null, "Value can not be 0 or negative");
            flag = 0;
        } else {
            if (winsize > maxwinsize && flag == 1) {
                JOptionPane.showMessageDialog(null, "Window Size can not be more than total sequence length(" + String.valueOf(maxwinsize) + ")");
                flag = 0;
            } else {
                flag = 1;
            }
        }

        if ("at".equals(tocall) && flag == 1) {

            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }

            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    ATskew ob2 = new ATskew(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        ATskew ob2 = new ATskew(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }

                }

            }

        } else if ("gc".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    GCskew ob2 = new GCskew(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        GCskew ob2 = new GCskew(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }

                }
            }

        } else if ("mk".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    MKskew ob2 = new MKskew(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        MKskew ob2 = new MKskew(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }

                }
            }

        } else if ("ry".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    RYskew ob2 = new RYskew(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        RYskew ob2 = new RYskew(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }

                }
            }

        } else if ("cgc".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    CummGCskew ob2 = new CummGCskew(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        CummGCskew ob2 = new CummGCskew(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("cry".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    CummRYskew ob2 = new CummRYskew(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        CummRYskew ob2 = new CummRYskew(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("cmk".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    CummMKskew ob2 = new CummMKskew(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        CummMKskew ob2 = new CummMKskew(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("cat".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    CummATskew ob2 = new CummATskew(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        CummATskew ob2 = new CummATskew(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compA".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotnucleocompositions ob2 = new Plotnucleocompositions(ob.returnseq(), 'A', winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotnucleocompositions ob2 = new Plotnucleocompositions(tempseq, 'A', winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compT".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotnucleocompositions ob2 = new Plotnucleocompositions(ob.returnseq(), 'T', winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotnucleocompositions ob2 = new Plotnucleocompositions(tempseq, 'T', winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compG".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotnucleocompositions ob2 = new Plotnucleocompositions(ob.returnseq(), 'G', winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotnucleocompositions ob2 = new Plotnucleocompositions(tempseq, 'G', winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compC".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotnucleocompositions ob2 = new Plotnucleocompositions(ob.returnseq(), 'C', winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotnucleocompositions ob2 = new Plotnucleocompositions(tempseq, 'C', winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compall".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotwholecomposition ob2 = new Plotwholecomposition(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotwholecomposition ob2 = new Plotwholecomposition(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("comppyr".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotpyrpur ob2 = new Plotpyrpur(ob.returnseq(), winsize, increment, 1, 0, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotpyrpur ob2 = new Plotpyrpur(tempseq, winsize, increment, 1, 0, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("comppur".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotpyrpur ob2 = new Plotpyrpur(ob.returnseq(), winsize, increment, 0, 1, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotpyrpur ob2 = new Plotpyrpur(tempseq, winsize, increment, 0, 1, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }
                Plotpyrpur ob2 = new Plotpyrpur(ob.returnseq(), winsize, increment, 0, 1, saveflag, fname);
                ob2.start();
            }
        } else if ("comppyrpur".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotpyrpur ob2 = new Plotpyrpur(ob.returnseq(), winsize, increment, 1, 1, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotpyrpur ob2 = new Plotpyrpur(tempseq, winsize, increment, 1, 1, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("shentropy1".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Shentropyo1 ob2 = new Shentropyo1(ob.returnseq(), winsize, increment, saveflag, fname,0);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Shentropyo1 ob2 = new Shentropyo1(tempseq, winsize, increment, saveflag, fname,0);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        }else if ("shentropyGC".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    //last parameter is flag
                    //0 for all 4 bases 1 for GC and 2 for AT
                    Shentropyo1 ob2 = new Shentropyo1(ob.returnseq(), winsize, increment, saveflag, fname,1);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Shentropyo1 ob2 = new Shentropyo1(tempseq, winsize, increment, saveflag, fname,1);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("shentropyAT".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Shentropyo1 ob2 = new Shentropyo1(ob.returnseq(), winsize, increment, saveflag, fname,2);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Shentropyo1 ob2 = new Shentropyo1(tempseq, winsize, increment, saveflag, fname,2);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        }else if ("redundancy".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Redundancyplot ob2 = new Redundancyplot(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Redundancyplot ob2 = new Redundancyplot(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("shentropy2".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Shentropyo2 ob2 = new Shentropyo2(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Shentropyo2 ob2 = new Shentropyo2(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("shentropy3".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Shentropyo3 ob2 = new Shentropyo3(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Shentropyo3 ob2 = new Shentropyo3(tempseq, winsize, increment, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("renyien".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Renyientropyform ob2 = new Renyientropyform(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.setVisible(true);
                    this.dispose();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Renyientropyform ob2 = new Renyientropyform(tempseq, winsize, increment, saveflag, fname);
                        ob2.setVisible(true);
                        this.dispose();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("entropygx".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Binaryentropyform ob2 = new Binaryentropyform(winsize, increment, saveflag, fname);
                    ob2.setVisible(true);
                    this.dispose();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Binaryentropyform ob2 = new Binaryentropyform(winsize, increment, saveflag, fname);
                        ob2.setVisible(true);
                        this.dispose();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compoam".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotaminoketo ob2 = new Plotaminoketo(ob.returnseq(), winsize, increment, 1, 0, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotaminoketo ob2 = new Plotaminoketo(tempseq, winsize, increment, 1, 0, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compoke".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotaminoketo ob2 = new Plotaminoketo(ob.returnseq(), winsize, increment, 0, 1, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotaminoketo ob2 = new Plotaminoketo(tempseq, winsize, increment, 0, 1, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compoak".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotaminoketo ob2 = new Plotaminoketo(ob.returnseq(), winsize, increment, 1, 1, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotaminoketo ob2 = new Plotaminoketo(tempseq, winsize, increment, 1, 1, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compostrng".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotstrngweak ob2 = new Plotstrngweak(ob.returnseq(), winsize, increment, 1, 0, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotstrngweak ob2 = new Plotstrngweak(tempseq, winsize, increment, 1, 0, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("compoweak".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotstrngweak ob2 = new Plotstrngweak(ob.returnseq(), winsize, increment, 0, 1, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotstrngweak ob2 = new Plotstrngweak(tempseq, winsize, increment, 0, 1, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("composw".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Plotstrngweak ob2 = new Plotstrngweak(ob.returnseq(), winsize, increment, 1, 1, saveflag, fname);
                    ob2.start();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Plotstrngweak ob2 = new Plotstrngweak(tempseq, winsize, increment, 1, 1, saveflag, fname);
                        ob2.start();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else if ("userdefined".equals(tocall) && flag == 1) {
            if (jCheckBoxsavefile.isSelected()) {
                saveflag = 1;
            }
            boolean errorflag = false;
            if (saveflag == 1) {
                fname = jTextFieldfilename.getText();
                if (fname == null || fname.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter a valid file name");
                    errorflag = true;

                } else {
                    //add save dir before file mane
                    fname = Form2.DEFAULT_SAVE_DIR + fname;
                    errorflag = false;
                }
            }
            if (!errorflag) {
                //boolean var to check the user defined length of genome, if not whole genome
                boolean falseval = false;
                Readfile ob = new Readfile();
                char[] seqtopass = null;
                seqtopass = ob.returnseq();
                //if wholegenome is selected
                if (len_flag == false) {
                    Formulacreator ob2 = new Formulacreator(ob.returnseq(), winsize, increment, saveflag, fname);
                    ob2.setVisible(true);
                    this.dispose();
                }

                //if start and end pos are specified
                if (len_flag == true) {

                    int start = 0, end = 0;
                    //get value for start and end
                    try {
                        start = Integer.parseInt(startpos.getText());
                        end = Integer.parseInt(endpos.getText());
                        //position starts from 1 so do --
                        start--;
                        end--;

                    } catch (NumberFormatException x) {
                        falseval = true;
                        System.out.println("Error : " + x.getMessage());
                        x.printStackTrace();
                    }

                    //check for values of start and end
                    if (start >= end || start < 0 || end < 0 || end > seqtopass.length || start > seqtopass.length) {
                        falseval = true;
                    } else {
                        falseval = false;
                        //System.out.println("VAL good");
                    }

                    if (falseval == false) {
                        int j = 0;
                        //System.out.println("Start="+start+"  End="+end);
                        char[] tempseq = new char[end - start + 1];
                        for (int i = start; i <= end; i++) {
                            //    System.out.println(i);
                            tempseq[j++] = seqtopass[i];
                        }

                        Formulacreator ob2 = new Formulacreator(tempseq, winsize, increment, saveflag, fname);
                        ob2.setVisible(true);
                        this.dispose();
                    } else if (falseval == true) {
                        JOptionPane.showMessageDialog(null, "Please check start and/or End values");
                    }
                }

            }
        } else {
            return;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBoxsavefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxsavefileActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxsavefile.isSelected()) {
            jTextFieldfilename.setEditable(true);
            jTextFieldfilename.setBackground(Color.WHITE);
        } else {

            jTextFieldfilename.setEditable(false);
            jTextFieldfilename.setBackground(Color.LIGHT_GRAY);
        }
    }//GEN-LAST:event_jCheckBoxsavefileActionPerformed

    private void endposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endposActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endposActionPerformed

    private void wholegenomecheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wholegenomecheckActionPerformed
        // TODO add your handling code here:
        if (!(wholegenomecheck.isSelected())) {
            startpos.setEditable(true);
            endpos.setEditable(true);
            startpos.setBackground(Color.WHITE);
            endpos.setBackground(Color.WHITE);
            len_flag = true;
        } else {

            startpos.setEditable(false);
            endpos.setEditable(false);
            startpos.setBackground(Color.LIGHT_GRAY);
            endpos.setBackground(Color.LIGHT_GRAY);
            len_flag = false;
        }
    }//GEN-LAST:event_wholegenomecheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Skewform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Skewform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Skewform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Skewform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new Skewform().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField endpos;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBoxsavefile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelfilename;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextFieldfilename;
    private javax.swing.JTextField jTextFieldinc;
    private javax.swing.JTextField jTextFieldwinsize;
    private javax.swing.JTextField startpos;
    private javax.swing.JCheckBox wholegenomecheck;
    // End of variables declaration//GEN-END:variables
}
